From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Da_Racci <tangentmoons@gmail.com>
Date: Sun, 17 Oct 2021 21:00:37 +1100
Subject: [PATCH] Potion NamespacedKey The addition of this namespacedkey will
 allow individual plugins to only get values of their own when interacting
 with potion and being able to use this to better control the flow of potions.


diff --git a/src/main/java/org/bukkit/potion/PotionEffect.java b/src/main/java/org/bukkit/potion/PotionEffect.java
index 74767751199bce03d63f2a9524712656193f850c..ad206ee3d8d31058408833cfbc9abc5bf5c30499 100644
--- a/src/main/java/org/bukkit/potion/PotionEffect.java
+++ b/src/main/java/org/bukkit/potion/PotionEffect.java
@@ -5,6 +5,7 @@ import java.util.Map;
 import java.util.NoSuchElementException;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Color;
+import org.bukkit.NamespacedKey;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.bukkit.entity.LivingEntity;
@@ -26,12 +27,14 @@ public class PotionEffect implements ConfigurationSerializable {
     private static final String AMBIENT = "ambient";
     private static final String PARTICLES = "has-particles";
     private static final String ICON = "has-icon";
+    private static final String KEY = "namespacedkey"; // Purpur
     private final int amplifier;
     private final int duration;
     private final PotionEffectType type;
     private final boolean ambient;
     private final boolean particles;
     private final boolean icon;
+    private final NamespacedKey key; // Purpur
 
     /**
      * Creates a potion effect.
@@ -42,8 +45,9 @@ public class PotionEffect implements ConfigurationSerializable {
      * @param ambient the ambient status, see {@link PotionEffect#isAmbient()}
      * @param particles the particle status, see {@link PotionEffect#hasParticles()}
      * @param icon the icon status, see {@link PotionEffect#hasIcon()}
+     * @param key the namespacedkey, see {@link PotionEffect#getKey()}
      */
-    public PotionEffect(@NotNull PotionEffectType type, int duration, int amplifier, boolean ambient, boolean particles, boolean icon) {
+    public PotionEffect(@NotNull PotionEffectType type, int duration, int amplifier, boolean ambient, boolean particles, boolean icon, NamespacedKey key) { // Purpur
         Validate.notNull(type, "effect type cannot be null");
         this.type = type;
         this.duration = duration;
@@ -51,7 +55,39 @@ public class PotionEffect implements ConfigurationSerializable {
         this.ambient = ambient;
         this.particles = particles;
         this.icon = icon;
+        this.key = key; // Purpur
+    }
+
+
+    // Purpur start - Key instead of icon constructor
+    /**
+     * Creates a potion effect.
+     * @param type effect type
+     * @param duration measured in ticks, see {@link
+     *     PotionEffect#getDuration()}
+     * @param amplifier the amplifier, see {@link PotionEffect#getAmplifier()}
+     * @param ambient the ambient status, see {@link PotionEffect#isAmbient()}
+     * @param particles the particle status, see {@link PotionEffect#hasParticles()}
+     * @param key the namespacedkey, see {@link PotionEffect#getKey()}
+     */
+    public PotionEffect(@NotNull PotionEffectType type, int duration, int amplifier, boolean ambient, boolean particles, NamespacedKey key) {
+        this(type, duration, amplifier, ambient, particles, particles, key);
+    }
+
+    /**
+     * Creates a potion effect.
+     * @param type effect type
+     * @param duration measured in ticks, see {@link
+     *     PotionEffect#getDuration()}
+     * @param amplifier the amplifier, see {@link PotionEffect#getAmplifier()}
+     * @param ambient the ambient status, see {@link PotionEffect#isAmbient()}
+     * @param particles the particle status, see {@link PotionEffect#hasParticles()}
+     * @param icon the icon status, see {@link PotionEffect#hasIcon()}
+     */
+    public PotionEffect(@NotNull PotionEffectType type, int duration, int amplifier, boolean ambient, boolean particles, boolean icon) {
+        this(type, duration, amplifier, ambient, particles, icon, null);
     }
+    // Purpur end
 
     /**
      * Creates a potion effect with no defined color.
@@ -98,7 +134,7 @@ public class PotionEffect implements ConfigurationSerializable {
      * @param map the map to deserialize from
      */
     public PotionEffect(@NotNull Map<String, Object> map) {
-        this(getEffectType(map), getInt(map, DURATION), getInt(map, AMPLIFIER), getBool(map, AMBIENT, false), getBool(map, PARTICLES, true), getBool(map, ICON, getBool(map, PARTICLES, true)));
+        this(getEffectType(map), getInt(map, DURATION), getInt(map, AMPLIFIER), getBool(map, AMBIENT, false), getBool(map, PARTICLES, true), getBool(map, ICON, getBool(map, PARTICLES, true)), getKey(map)); // Purpur - getKey
     }
 
     // Paper start
@@ -128,6 +164,13 @@ public class PotionEffect implements ConfigurationSerializable {
     }
     // Paper end
 
+    // Purpur start
+    @NotNull
+    public PotionEffect withKey(NamespacedKey key) {
+        return new PotionEffect(this.type, duration, amplifier, ambient, particles, icon, key);
+    }
+    // Purpur end
+
     @NotNull
     private static PotionEffectType getEffectType(@NotNull Map<?, ?> map) {
         int type = getInt(map, TYPE);
@@ -154,6 +197,16 @@ public class PotionEffect implements ConfigurationSerializable {
         return def;
     }
 
+    // Purpur start
+    private static NamespacedKey getKey(@NotNull Map<?, ?> map) {
+        Object key = map.get(KEY);
+        if (key instanceof NamespacedKey) {
+            return (NamespacedKey) key;
+        }
+        return null;
+    }
+    // Purpur end
+
     @Override
     @NotNull
     public Map<String, Object> serialize() {
@@ -164,6 +217,7 @@ public class PotionEffect implements ConfigurationSerializable {
             .put(AMBIENT, ambient)
             .put(PARTICLES, particles)
             .put(ICON, icon)
+            .put(KEY, key) // Purpur
             .build();
     }
 
@@ -188,7 +242,7 @@ public class PotionEffect implements ConfigurationSerializable {
             return false;
         }
         PotionEffect that = (PotionEffect) obj;
-        return this.type.equals(that.type) && this.ambient == that.ambient && this.amplifier == that.amplifier && this.duration == that.duration && this.particles == that.particles && this.icon == that.icon;
+        return this.type.equals(that.type) && this.ambient == that.ambient && this.amplifier == that.amplifier && this.duration == that.duration && this.particles == that.particles && this.icon == that.icon && this.key == that.key; // Purpur - add key
     }
 
     /**
@@ -256,6 +310,22 @@ public class PotionEffect implements ConfigurationSerializable {
         return icon;
     }
 
+    // Purpur start
+    /**
+     * @return if they key is null or not
+     */
+    public boolean hasKey() {
+        return key != null;
+    }
+    /**
+     * @return the key attached to the Potion
+     */
+    @Nullable
+    public NamespacedKey getKey() {
+        return key;
+    }
+    // Purpur end
+
     @Override
     public int hashCode() {
         int hash = 1;
@@ -265,6 +335,7 @@ public class PotionEffect implements ConfigurationSerializable {
         hash ^= 0x22222222 >> (ambient ? 1 : -1);
         hash ^= 0x22222222 >> (particles ? 1 : -1);
         hash ^= 0x22222222 >> (icon ? 1 : -1);
+        hash = hash * 31 + key.hashCode(); // Purpur
         return hash;
     }
 
