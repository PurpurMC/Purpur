From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Parker Hawke <hawkeboyz2@hotmail.com>
Date: Sat, 27 Jun 2020 18:43:37 -0400
Subject: [PATCH] Improve output of plugins command

Co-authored-by: Oharass <oharass@bk.ru>
Co-authored-by: granny <granny@purpurmc.org>

diff --git a/src/main/java/io/papermc/paper/command/PaperPluginsCommand.java b/src/main/java/io/papermc/paper/command/PaperPluginsCommand.java
index f0fce4113fb07c64adbec029d177c236cbdcbae8..e94224ed280247ee69dfdff8dc960f2b8729be33 100644
--- a/src/main/java/io/papermc/paper/command/PaperPluginsCommand.java
+++ b/src/main/java/io/papermc/paper/command/PaperPluginsCommand.java
@@ -78,10 +78,10 @@ public class PaperPluginsCommand extends BukkitCommand {
         this.setAliases(Arrays.asList("pl"));
     }
 
-    private static <T> List<Component> formatProviders(TreeMap<String, PluginProvider<T>> plugins) {
+    private static <T> List<Component> formatProviders(TreeMap<String, PluginProvider<T>> plugins, @NotNull CommandSender sender) { // Purpur
         List<Component> components = new ArrayList<>(plugins.size());
         for (PluginProvider<T> entry : plugins.values()) {
-            components.add(formatProvider(entry));
+            components.add(formatProvider(entry, sender)); // Purpur
         }
 
         boolean isFirst = true;
@@ -109,7 +109,7 @@ public class PaperPluginsCommand extends BukkitCommand {
         return formattedSublists;
     }
 
-    private static Component formatProvider(PluginProvider<?> provider) {
+    private static Component formatProvider(PluginProvider<?> provider, @NotNull CommandSender sender) { // Purpur
         TextComponent.Builder builder = Component.text();
         if (provider instanceof SpigotPluginProvider spigotPluginProvider && CraftMagicNumbers.isLegacy(spigotPluginProvider.getMeta())) {
             builder.append(LEGACY_PLUGIN_STAR);
@@ -117,12 +117,64 @@ public class PaperPluginsCommand extends BukkitCommand {
 
         String name = provider.getMeta().getName();
         Component pluginName = Component.text(name, fromStatus(provider))
-            .clickEvent(ClickEvent.runCommand("/version " + name));
+        // Purpur start
+            .clickEvent(ClickEvent.suggestCommand("/version " + name));
+
+        if (sender instanceof org.bukkit.entity.Player && sender.hasPermission("bukkit.command.version")) {
+            // Event components
+            String description = provider.getMeta().getDescription();
+            TextComponent.Builder hover = Component.text();
+            hover.append(Component.text("Version: ", NamedTextColor.WHITE)).append(Component.text(provider.getMeta().getVersion(), NamedTextColor.GREEN));
+
+            if (description != null) {
+                hover.append(Component.newline())
+                        .append(Component.text("Description: ", NamedTextColor.WHITE))
+                        .append(Component.text(description, NamedTextColor.GREEN));
+            }
+
+            if (provider.getMeta().getWebsite() != null) {
+                hover.append(Component.newline())
+                        .append(Component.text("Website: ", NamedTextColor.WHITE))
+                        .append(Component.text(provider.getMeta().getWebsite(), NamedTextColor.GREEN));
+            }
+
+            if (!provider.getMeta().getAuthors().isEmpty()) {
+                hover.append(Component.newline());
+                if (provider.getMeta().getAuthors().size() == 1) {
+                    hover.append(Component.text("Author: "));
+                } else {
+                    hover.append(Component.text("Authors: "));
+                }
+
+                hover.append(getAuthors(provider.getMeta()));
+            }
+
+            pluginName.hoverEvent(hover.build());
+        }
 
         builder.append(pluginName);
+        // Purpur end
+
+        return builder.build();
+    }
+
+    // Purpur start
+    @NotNull
+    private static TextComponent getAuthors(@NotNull final PluginMeta pluginMeta) {
+        TextComponent.Builder builder = Component.text();
+        List<String> authors = pluginMeta.getAuthors();
+
+        for (int i = 0; i < authors.size(); i++) {
+            if (i > 0) {
+                builder.append(Component.text(i < authors.size() - 1 ? ", " : " and ", NamedTextColor.WHITE));
+            }
+
+            builder.append(Component.text(authors.get(i), NamedTextColor.GREEN));
+        }
 
         return builder.build();
     }
+    // Purpur end
 
     private static Component asPlainComponents(String strings) {
         net.kyori.adventure.text.TextComponent.Builder builder = Component.text();
@@ -182,24 +234,24 @@ public class PaperPluginsCommand extends BukkitCommand {
             }
         }
 
-        Component infoMessage = Component.text("Server Plugins (%s):".formatted(paperPlugins.size() + spigotPlugins.size()), NamedTextColor.WHITE);
+        //Component infoMessage = Component.text("Server Plugins (%s):".formatted(paperPlugins.size() + spigotPlugins.size()), NamedTextColor.WHITE);
             //.append(INFO_ICON_START.hoverEvent(SERVER_PLUGIN_INFO)); TODO: Add docs
 
-        sender.sendMessage(infoMessage);
+        //sender.sendMessage(infoMessage); // Purpur
 
         if (!paperPlugins.isEmpty()) {
-            sender.sendMessage(PAPER_HEADER);
+            sender.sendMessage(PAPER_HEADER.append(Component.text(" (%s):".formatted(paperPlugins.size())))); // Purpur
         }
 
-        for (Component component : formatProviders(paperPlugins)) {
+        for (Component component : formatProviders(paperPlugins, sender)) { // Purpur
             sender.sendMessage(component);
         }
 
         if (!spigotPlugins.isEmpty()) {
-            sender.sendMessage(BUKKIT_HEADER);
+            sender.sendMessage(BUKKIT_HEADER.append(Component.text(" (%s):".formatted(spigotPlugins.size())))); // Purpur
         }
         
-        for (Component component : formatProviders(spigotPlugins)) {
+        for (Component component : formatProviders(spigotPlugins, sender)) { // Purpur
             sender.sendMessage(component);
         }
 
