From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: William Blake Galbreath <blake.galbreath@gmail.com>
Date: Thu, 26 Mar 2020 21:39:32 -0500
Subject: [PATCH] Configurable jockey options


diff --git a/src/main/java/net/minecraft/world/entity/monster/Drowned.java b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
index 107857a335d0660347a6bfd61f697c45589f01ad..d7bff41c288b0fe90d6465e38831b5df63f28f45 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Drowned.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
@@ -93,6 +93,21 @@ public class Drowned extends Zombie implements RangedAttackMob {
     protected void randomizeReinforcementsChance() {
         this.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).setBaseValue(this.random.nextDouble() * this.level.purpurConfig().mobs.drowned.attributes.spawnReinforcements);
     }
+
+    @Override
+    public boolean jockeyOnlyBaby() {
+        return level.purpurConfig().mobs.drowned.jockey.onlyBabies;
+    }
+
+    @Override
+    public double jockeyChance() {
+        return level.purpurConfig().mobs.drowned.jockey.chance;
+    }
+
+    @Override
+    public boolean jockeyTryExistingChickens() {
+        return level.purpurConfig().mobs.drowned.jockey.tryExistingChickens;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Husk.java b/src/main/java/net/minecraft/world/entity/monster/Husk.java
index 7b511b31211b013ca1d5138c8e346acb4a73c850..a4df2e0336e84a7ae9aa78c897ea70c5a5fd5e22 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Husk.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Husk.java
@@ -47,6 +47,21 @@ public class Husk extends Zombie {
     protected void randomizeReinforcementsChance() {
         this.getAttribute(net.minecraft.world.entity.ai.attributes.Attributes.SPAWN_REINFORCEMENTS_CHANCE).setBaseValue(this.random.nextDouble() * this.level.purpurConfig().mobs.husk.attributes.spawnReinforcements);
     }
+
+    @Override
+    public boolean jockeyOnlyBaby() {
+        return level.purpurConfig().mobs.husk.jockey.onlyBabies;
+    }
+
+    @Override
+    public double jockeyChance() {
+        return level.purpurConfig().mobs.husk.jockey.chance;
+    }
+
+    @Override
+    public boolean jockeyTryExistingChickens() {
+        return level.purpurConfig().mobs.husk.jockey.tryExistingChickens;
+    }
     // Purpur end
 
     public static boolean checkHuskSpawnRules(EntityType<Husk> type, ServerLevelAccessor world, MobSpawnType spawnReason, BlockPos pos, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index 9c7404f95796ed197d117f6ab3f5acd845d7eb29..45bc56e2701d913c91d1ca582b56fe847ae61dab 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -125,6 +125,18 @@ public class Zombie extends Monster {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig().mobs.zombie.attributes.maxHealth);
     }
+
+    public boolean jockeyOnlyBaby() {
+        return level.purpurConfig().mobs.zombie.jockey.onlyBabies;
+    }
+
+    public double jockeyChance() {
+        return level.purpurConfig().mobs.zombie.jockey.chance;
+    }
+
+    public boolean jockeyTryExistingChickens() {
+        return level.purpurConfig().mobs.zombie.jockey.tryExistingChickens;
+    }
     // Purpur end
 
     @Override
@@ -546,19 +558,20 @@ public class Zombie extends Monster {
         if (object instanceof Zombie.ZombieGroupData) {
             Zombie.ZombieGroupData entityzombie_groupdatazombie = (Zombie.ZombieGroupData) object;
 
-            if (entityzombie_groupdatazombie.isBaby) {
-                this.setBaby(true);
+            // Purpur start
+            if (!jockeyOnlyBaby() || entityzombie_groupdatazombie.isBaby) {
+                this.setBaby(entityzombie_groupdatazombie.isBaby);
                 if (entityzombie_groupdatazombie.canSpawnJockey) {
-                    if ((double) randomsource.nextFloat() < 0.05D) {
-                        List<Chicken> list = world.getEntitiesOfClass(Chicken.class, this.getBoundingBox().inflate(5.0D, 3.0D, 5.0D), EntitySelector.ENTITY_NOT_BEING_RIDDEN);
+                    if ((double) randomsource.nextFloat() < jockeyChance()) {
+                        List<Chicken> list = jockeyTryExistingChickens() ? world.getEntitiesOfClass(Chicken.class, this.getBoundingBox().inflate(5.0D, 3.0D, 5.0D), EntitySelector.ENTITY_NOT_BEING_RIDDEN) : java.util.Collections.emptyList();
+                        // Purpur end
 
                         if (!list.isEmpty()) {
                             Chicken entitychicken = (Chicken) list.get(0);
 
                             entitychicken.setChickenJockey(true);
                             this.startRiding(entitychicken);
-                        }
-                    } else if ((double) randomsource.nextFloat() < 0.05D) {
+                        } else { // Purpur
                         Chicken entitychicken1 = (Chicken) EntityType.CHICKEN.create(this.level);
 
                         entitychicken1.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), 0.0F);
@@ -566,6 +579,7 @@ public class Zombie extends Monster {
                         entitychicken1.setChickenJockey(true);
                         this.startRiding(entitychicken1);
                         world.addFreshEntity(entitychicken1, CreatureSpawnEvent.SpawnReason.MOUNT); // CraftBukkit
+                        } // Purpur
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
index 5b0f3479bd78bc9a0c6d3ab15529b1e1905b8cf2..ffbfe6b54e7d04e6b02455381ec84fa1f76e130e 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
@@ -103,6 +103,21 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
     protected void randomizeReinforcementsChance() {
         this.getAttribute(net.minecraft.world.entity.ai.attributes.Attributes.SPAWN_REINFORCEMENTS_CHANCE).setBaseValue(this.random.nextDouble() * this.level.purpurConfig().mobs.zombieVillager.attributes.spawnReinforcements);
     }
+
+    @Override
+    public boolean jockeyOnlyBaby() {
+        return level.purpurConfig().mobs.zombieVillager.jockey.onlyBabies;
+    }
+
+    @Override
+    public double jockeyChance() {
+        return level.purpurConfig().mobs.zombieVillager.jockey.chance;
+    }
+
+    @Override
+    public boolean jockeyTryExistingChickens() {
+        return level.purpurConfig().mobs.zombieVillager.jockey.tryExistingChickens;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
index 592825523495692453aa31a2b77bb987b0b9a639..30c8a87e8deea5ace74d140be73c7cd68a3eb0c8 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
@@ -79,6 +79,21 @@ public class ZombifiedPiglin extends Zombie implements NeutralMob {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig().mobs.zombifiedPiglin.attributes.maxHealth);
     }
+
+    @Override
+    public boolean jockeyOnlyBaby() {
+        return level.purpurConfig().mobs.zombifiedPiglin.jockey.onlyBabies;
+    }
+
+    @Override
+    public double jockeyChance() {
+        return level.purpurConfig().mobs.zombifiedPiglin.jockey.chance;
+    }
+
+    @Override
+    public boolean jockeyTryExistingChickens() {
+        return level.purpurConfig().mobs.zombifiedPiglin.jockey.tryExistingChickens;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/org/purpurmc/purpur/configuration/PurpurWorldConfiguration.java b/src/main/java/org/purpurmc/purpur/configuration/PurpurWorldConfiguration.java
index 8a135e99ee64caacdad5fcdf5ac3f4b7613c04ee..abe9dc054abaca0a0fafadc1d75ad9214a1c27bb 100644
--- a/src/main/java/org/purpurmc/purpur/configuration/PurpurWorldConfiguration.java
+++ b/src/main/java/org/purpurmc/purpur/configuration/PurpurWorldConfiguration.java
@@ -257,6 +257,13 @@ public class PurpurWorldConfiguration extends ConfigurationPart {
                 public double maxHealth = 20.0D;
                 public double spawnReinforcements = 0.1D;
             }
+
+            public Jockey jockey;
+            public class Jockey extends ConfigurationPart {
+                public boolean onlyBabies = true;
+                public double chance = 0.05D;
+                public boolean tryExistingChickens = true;
+            }
         }
 
         public ElderGuardian elderGuardian;
@@ -483,6 +490,13 @@ public class PurpurWorldConfiguration extends ConfigurationPart {
                 public double maxHealth = 20.0D;
                 public double spawnReinforcements = 0.1D;
             }
+
+            public Jockey jockey;
+            public class Jockey extends ConfigurationPart {
+                public boolean onlyBabies = true;
+                public double chance = 0.05D;
+                public boolean tryExistingChickens = true;
+            }
         }
 
         public Illusioner illusioner;
@@ -1219,6 +1233,13 @@ public class PurpurWorldConfiguration extends ConfigurationPart {
                 public double maxHealth = 20.0D;
                 public double spawnReinforcements = 0.1D;
             }
+
+            public Jockey jockey;
+            public class Jockey extends ConfigurationPart {
+                public boolean onlyBabies = true;
+                public double chance = 0.05D;
+                public boolean tryExistingChickens = true;
+            }
         }
 
         public ZombieHorse zombieHorse;
@@ -1256,6 +1277,13 @@ public class PurpurWorldConfiguration extends ConfigurationPart {
                 public double maxHealth = 20.0D;
                 public double spawnReinforcements = 0.1D;
             }
+
+            public Jockey jockey;
+            public class Jockey extends ConfigurationPart {
+                public boolean onlyBabies = true;
+                public double chance = 0.05D;
+                public boolean tryExistingChickens = true;
+            }
         }
 
         public ZombifiedPiglin zombifiedPiglin;
@@ -1272,6 +1300,13 @@ public class PurpurWorldConfiguration extends ConfigurationPart {
                 public double maxHealth = 20.0D;
                 public double spawnReinforcements = 0.0D;
             }
+
+            public Jockey jockey;
+            public class Jockey extends ConfigurationPart {
+                public boolean onlyBabies = true;
+                public double chance = 0.05D;
+                public boolean tryExistingChickens = true;
+            }
         }
     }
 
