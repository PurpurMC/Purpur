From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jason Penilla <11360596+jpenilla@users.noreply.github.com>
Date: Sat, 22 Aug 2020 20:47:11 -0700
Subject: [PATCH] Allow toggling special MobSpawners per world

In vanilla, these are all hardcoded on for world type 0 (overworld) and hardcoded off for every other world type. Default config behaviour matches this.

diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 03fce06dcdc2c8e4dafce04d22f75b23ea9d32c9..50e94cf33e760d1602e44256e4ccae667a64d65d 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -504,7 +504,24 @@ public class ServerLevel extends Level implements WorldGenLevel {
         this.dragonParts = new Int2ObjectOpenHashMap();
         this.tickTime = flag1;
         this.server = minecraftserver;
-        this.customSpawners = list;
+        // Purpur start - enable/disable MobSpawners per world
+        this.customSpawners = Lists.newArrayList();
+        if (purpurConfig().gameplayMechanics.mobSpawning.shouldAddCustomSpawner(purpurConfig().gameplayMechanics.mobSpawning.phantomSpawning, env)) {
+            customSpawners.add(new net.minecraft.world.level.levelgen.PhantomSpawner());
+        }
+        if (purpurConfig().gameplayMechanics.mobSpawning.shouldAddCustomSpawner(purpurConfig().gameplayMechanics.mobSpawning.patrolSpawning, env)) {
+            customSpawners.add(new net.minecraft.world.level.levelgen.PatrolSpawner());
+        }
+        if (purpurConfig().gameplayMechanics.mobSpawning.shouldAddCustomSpawner(purpurConfig().gameplayMechanics.mobSpawning.catSpawning, env)) {
+            customSpawners.add(new net.minecraft.world.entity.npc.CatSpawner());
+        }
+        if (purpurConfig().gameplayMechanics.mobSpawning.shouldAddCustomSpawner(purpurConfig().gameplayMechanics.mobSpawning.villageSiegeSpawning, env)) {
+            customSpawners.add(new net.minecraft.world.entity.ai.village.VillageSiege());
+        }
+        if (purpurConfig().gameplayMechanics.mobSpawning.shouldAddCustomSpawner(purpurConfig().gameplayMechanics.mobSpawning.villagerTraderSpawning, env)) {
+            customSpawners.add(new net.minecraft.world.entity.npc.WanderingTraderSpawner(iworlddataserver));
+        }
+        // Purpur end
         this.serverLevelData = iworlddataserver;
         ChunkGenerator chunkgenerator = worlddimension.generator();
         // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java b/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
index daa7c4bd8a3f6c28f02b7117b061f0def29e3743..d4699d7eefafffd2d4e0a03d62d5094f001bbcae 100644
--- a/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
+++ b/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
@@ -4,6 +4,7 @@ import java.util.Iterator;
 import java.util.Optional;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.server.level.ServerLevel;
@@ -162,7 +163,17 @@ public class WanderingTraderSpawner implements CustomSpawner {
             int k = pos.getX() + this.random.nextInt(range * 2) - range;
             int l = pos.getZ() + this.random.nextInt(range * 2) - range;
             int i1 = world.getHeight(Heightmap.Types.WORLD_SURFACE, k, l);
-            BlockPos blockposition2 = new BlockPos(k, i1, l);
+            // Purpur start - allow traders to spawn below nether roof
+            BlockPos.MutableBlockPos blockposition2 = new BlockPos.MutableBlockPos(k, i1, l);
+            if (world.dimensionType().hasCeiling()) {
+                do {
+                    blockposition2.relative(Direction.DOWN);
+                } while (!world.getBlockState(blockposition2).isAir());
+                do {
+                    blockposition2.relative(Direction.DOWN);
+                } while (world.getBlockState(blockposition2).isAir() && blockposition2.getY() > 0);
+            }
+            // Purpur end
 
             if (NaturalSpawner.isSpawnPositionOk(SpawnPlacements.Type.ON_GROUND, world, blockposition2, EntityType.WANDERING_TRADER)) {
                 blockposition1 = blockposition2;
diff --git a/src/main/java/org/purpurmc/purpur/configuration/PurpurWorldConfiguration.java b/src/main/java/org/purpurmc/purpur/configuration/PurpurWorldConfiguration.java
index f977733b846eee38640d087b1504cd88b8d6d6a2..9810bca5bfb0351913ef6dd1dbea0b3d72a97172 100644
--- a/src/main/java/org/purpurmc/purpur/configuration/PurpurWorldConfiguration.java
+++ b/src/main/java/org/purpurmc/purpur/configuration/PurpurWorldConfiguration.java
@@ -11,11 +11,14 @@ import net.minecraft.world.item.Item;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Explosion;
 import net.minecraft.world.level.block.Block;
+import org.apache.commons.lang3.BooleanUtils;
+import org.bukkit.World;
 import org.spongepowered.configurate.objectmapping.meta.Setting;
 
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 
 public class PurpurWorldConfiguration extends ConfigurationPart {
@@ -1434,6 +1437,22 @@ public class PurpurWorldConfiguration extends ConfigurationPart {
             public List<Item> fire = new ArrayList<>();
             public List<Item> lightning = new ArrayList<>();
         }
+
+        public MobSpawning mobSpawning;
+        public class MobSpawning extends ConfigurationPart {
+            public String catSpawning = "default";
+            public String patrolSpawning = "default";
+            public String phantomSpawning = "default";
+            public String villagerTraderSpawning = "default";
+            public String villageSiegeSpawning = "default";
+
+            public boolean shouldAddCustomSpawner(String configValue, World.Environment env) {
+                if (configValue.equalsIgnoreCase("default") && env == World.Environment.NORMAL) {
+                    return true;
+                }
+                return BooleanUtils.toBoolean(configValue.toLowerCase(Locale.ROOT));
+            }
+        }
     }
 
     public Blocks blocks;
