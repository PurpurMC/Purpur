From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: oharass <oharass@bk.ru>
Date: Sun, 3 Oct 2021 10:00:00 +0200
Subject: [PATCH] configurable tps


diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
index f9251183df72ddc56662fd3f02acf21641a2200c..4f55c555a7e7bee1336d50ed63de0a3b4c98dcb8 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
@@ -81,6 +81,6 @@ public class RAMDetails extends JList<String> {
     }
 
     private static String format(double tps) {
-        return ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 );
+        return ( ( tps > MinecraftServer.TPS ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, MinecraftServer.TPS ); // Purpur
     }
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 90ee25e5ec25a1adae6d3d50607cf5ba2de8ca49..ccfe616e8ccfbe72bcfa4cf0ec84c9ea6f25878c 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -195,7 +195,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public static final Logger LOGGER = LogManager.getLogger();
     private static final float AVERAGE_TICK_TIME_SMOOTHING = 0.8F;
     private static final int TICK_STATS_SPAN = 100;
-    public static final int MS_PER_TICK = 50;
+    public static int MS_PER_TICK = 1000 / net.pl3x.purpur.PurpurConfig.targetTps; // Purpur
     private static final int SNOOPER_UPDATE_INTERVAL = 6000;
     private static final int OVERLOADED_THRESHOLD = 2000;
     private static final int OVERLOADED_WARNING_INTERVAL = 15000;
@@ -303,7 +303,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public boolean forceTicks; // Paper
     // CraftBukkit end
     // Spigot start
-    public static final int TPS = 20;
+    public static int TPS = net.pl3x.purpur.PurpurConfig.targetTps; // purpur
     public static final int TICK_TIME = 1000000000 / MinecraftServer.TPS;
     private static final int SAMPLE_INTERVAL = 20; // Paper
     public final double[] recentTps = new double[ 4 ]; // Purpur
@@ -315,6 +315,12 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     public volatile Thread shutdownThread; // Paper
     public volatile boolean abnormalExit = false; // Paper
+    // Purpur start
+    public void updateTps(final int targetTps) {
+        TPS = targetTps;
+        MS_PER_TICK = 1000 / targetTps;
+    }
+    // Purpur end
 
     public static <S extends MinecraftServer> S spin(Function<Thread, S> serverFactory) {
         AtomicReference<S> atomicreference = new AtomicReference();
@@ -1249,11 +1255,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     long i = ((curTime = System.nanoTime()) / (1000L * 1000L)) - this.nextTickTime; // Paper
 
                     if (i > 5000L && this.nextTickTime - this.lastOverloadWarning >= 30000L) { // CraftBukkit
-                        long j = i / 50L;
+                        long j = i / MinecraftServer.MS_PER_TICK; // Purpur
 
                         if (this.server.getWarnOnOverload()) // CraftBukkit
                             MinecraftServer.LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
-                        this.nextTickTime += j * 50L;
+                        this.nextTickTime += j * MinecraftServer.MS_PER_TICK; // Purpur
                         this.lastOverloadWarning = this.nextTickTime;
                     }
 
@@ -1286,7 +1292,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
                     //MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit // Paper - don't overwrite current tick time
                     lastTick = curTime;
-                    this.nextTickTime += 50L;
+                    this.nextTickTime += MinecraftServer.MS_PER_TICK; // Purpur
                     this.startMetricsRecordingTick();
                     this.profiler.push("tick");
                     this.tickServer(this::haveTime);
@@ -1294,9 +1300,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     this.mayHaveDelayedTasks = true;
                     // Purpur start - tps catchup
                     if (net.pl3x.purpur.PurpurConfig.tpsCatchup) {
-                        this.delayedTasksMaxNextTickTime = Math.max(Util.getMillis() + 50L, this.nextTickTime);
+                        this.delayedTasksMaxNextTickTime = Math.max(Util.getMillis() + MinecraftServer.MS_PER_TICK, this.nextTickTime); // Purpur
                     } else {
-                        this.delayedTasksMaxNextTickTime = this.nextTickTime = curTime / 1000000L + 50L;
+                        this.delayedTasksMaxNextTickTime = this.nextTickTime = curTime / 1000000L + MinecraftServer.MS_PER_TICK; // Purpur
                     }
                     // Purpur end - tps catchup
                     this.waitUntilNextTick();
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index a9ba71573e4e3dfadaf3212400ffd023deada042..3303e911d0a4c54c0cb018f70cc9a15030fd0288 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -235,6 +235,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         gg.airplane.AirplaneConfig.load(); // Airplane - config
         gg.airplane.commands.AirplaneCommands.init(); // Airplane - command
 
+        updateTps(net.pl3x.purpur.PurpurConfig.targetTps); // Purpur
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setResourcePack(dedicatedserverproperties.resourcePack, this.getPackHash());
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index a11a7deefb7fdf7ca9b23f85f5ae5f7c8ca935ac..6d3a52cc9d6c60ecd0920de8c55f50d8f6e6be0b 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -66,13 +66,13 @@ public class ServerPlayerGameMode {
 
     // Paper start - lag compensate block breaking
     private int getTimeDiggingLagCompensate() {
-        int lagCompensated = (int)((System.nanoTime() - this.lastDigTime) / (50L * 1000L * 1000L));
+        int lagCompensated = (int)((System.nanoTime() - this.lastDigTime) / (MinecraftServer.MS_PER_TICK * 1000L * 1000L)); // Purpur
         int tickDiff = this.gameTicks - this.destroyProgressStart;
         return (com.destroystokyo.paper.PaperConfig.lagCompensateBlockBreaking && lagCompensated > (tickDiff + 1)) ? lagCompensated : tickDiff; // add one to ensure we don't lag compensate unless we need to
     }
 
     private int getTimeDiggingTooFastLagCompensate() {
-        int lagCompensated = (int)((System.nanoTime() - this.hasDestroyedTooFastStartTime) / (50L * 1000L * 1000L));
+        int lagCompensated = (int)((System.nanoTime() - this.hasDestroyedTooFastStartTime) / (MinecraftServer.MS_PER_TICK * 1000L * 1000L)); // Purpur
         int tickDiff = this.gameTicks - this.delayedTickStart;
         return (com.destroystokyo.paper.PaperConfig.lagCompensateBlockBreaking && lagCompensated > (tickDiff + 1)) ? lagCompensated : tickDiff; // add one to ensure we don't lag compensate unless we need to
     }
diff --git a/src/main/java/net/pl3x/purpur/PurpurConfig.java b/src/main/java/net/pl3x/purpur/PurpurConfig.java
index 646cab345fc96d3ebaae49bb61925b8094dc68d9..d54da46a1b8f7b363618f65716e8c6941a06d7a2 100644
--- a/src/main/java/net/pl3x/purpur/PurpurConfig.java
+++ b/src/main/java/net/pl3x/purpur/PurpurConfig.java
@@ -399,6 +399,11 @@ public class PurpurConfig {
         tpsCatchup = getBoolean("settings.tps-catchup", tpsCatchup);
     }
 
+    public static int targetTps = 20;
+    private static void targetTps() {
+        targetTps = getInt("settings.target-tps", targetTps);
+    }
+
     public static boolean useUPnP = false;
     private static void networkSettings() {
         useUPnP = getBoolean("settings.network.upnp-port-forwarding", useUPnP);
diff --git a/src/main/java/net/pl3x/purpur/command/PurpurCommand.java b/src/main/java/net/pl3x/purpur/command/PurpurCommand.java
index cd63e9e556fa4931ab33c63931cf916757c51a62..02f5bd32bd42c2c7103c37ef494ce0b023a39686 100644
--- a/src/main/java/net/pl3x/purpur/command/PurpurCommand.java
+++ b/src/main/java/net/pl3x/purpur/command/PurpurCommand.java
@@ -51,6 +51,7 @@ public class PurpurCommand extends Command {
                 level.purpurConfig.init();
                 level.resetBreedingCooldowns();
             }
+            console.updateTps(PurpurConfig.targetTps);
             console.server.reloadCount++;
 
             Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Purpur config reload complete.");
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 4322a3bc15c3f0cc71788719362f6ac5627379b9..beccdb3059640ba05f651c6845ca01d05351962c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -2388,7 +2388,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (duration == null) {
             return -1;
         }
-        return (int) (duration.toMillis() / 50L);
+        return (int) (duration.toMillis() / net.minecraft.server.MinecraftServer.MS_PER_TICK);
     }
 
     @Override
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 088239d17aa8178cf8af09ec23cfd4deaaf2bbb6..2556ed63c6661d49036ae8c6d3d2ab90396d5ded 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -47,7 +47,8 @@ public class TicksPerSecondCommand extends Command
     private boolean hasShownMemoryWarning; // Paper
     private static String format(double tps) // Paper - Made static
     {
-        return ( ( tps > 18.0 ) ? ChatColor.GREEN : ( tps > 16.0 ) ? ChatColor.YELLOW : ChatColor.RED ).toString()
-                + ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 ); // Paper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
-    }
+        // Purpur start
+        return ( ( tps > MinecraftServer.TPS * 0.9F ) ? ChatColor.GREEN : ( tps > MinecraftServer.TPS * 0.8F ) ? ChatColor.YELLOW : ChatColor.RED ).toString()
+                + ( ( tps > MinecraftServer.TPS * 1.025F ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, MinecraftServer.TPS ); // Paper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
+    }   // Purpur end
 }
