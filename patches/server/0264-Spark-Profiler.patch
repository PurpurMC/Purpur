From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ben Kerllenevich <ben@omega24.dev>
Date: Sat, 25 Jun 2022 19:40:36 -0400
Subject: [PATCH] Spark Profiler

Co-authored-by: granny <granny@purpurmc.org>

diff --git a/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java b/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
index 89bf48fd581ee6580b91e2eb31dd532cb622df5e..e35da199be67e04c34df6bc09afd8d8122cb0487 100644
--- a/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
+++ b/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
@@ -102,6 +102,7 @@ public class PluginInitializerManager {
         java.util.List<File> files = (java.util.List<File>) optionSet.valuesOf("add-plugin");
         // Register plugins from the flag
         io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(io.papermc.paper.plugin.provider.source.PluginFlagProviderSource.INSTANCE, files);
+        io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(io.papermc.paper.plugin.provider.source.SparkProviderSource.INSTANCE, new File("cache", "spark.jar").toPath()); // Purpur
     }
 
     // This will be the end of me...
diff --git a/src/main/java/io/papermc/paper/plugin/provider/source/SparkProviderSource.java b/src/main/java/io/papermc/paper/plugin/provider/source/SparkProviderSource.java
new file mode 100644
index 0000000000000000000000000000000000000000..2d6fa262a7f1a298069e74266cb62fed0136833c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/source/SparkProviderSource.java
@@ -0,0 +1,82 @@
+package io.papermc.paper.plugin.provider.source;
+
+import com.mojang.logging.LogUtils;
+import io.papermc.paper.plugin.entrypoint.Entrypoint;
+import io.papermc.paper.plugin.entrypoint.EntrypointHandler;
+import io.papermc.paper.plugin.entrypoint.LaunchEntryPointHandler;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.InputStreamReader;
+import java.math.BigInteger;
+import java.net.URL;
+import java.net.URLConnection;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.StandardCopyOption;
+import java.security.MessageDigest;
+import java.util.stream.Collectors;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.slf4j.Logger;
+
+public class SparkProviderSource extends FileProviderSource {
+    public static final SparkProviderSource INSTANCE = new SparkProviderSource();
+
+    private static final Logger LOGGER = LogUtils.getClassLogger();
+
+    public SparkProviderSource() {
+        super("File '%s' specified by Purpur"::formatted);
+    }
+
+    @Override
+    public void registerProviders(EntrypointHandler entrypointHandler, Path context) throws Exception {
+        if (!Boolean.getBoolean("Purpur.IReallyDontWantSpark")) {
+            try {
+                File file = context.toFile();
+                file.getParentFile().mkdirs();
+
+                boolean shouldDownload = true;
+                if (file.exists()) {
+                    String fileSha1 = String.format("%040x", new BigInteger(1, MessageDigest.getInstance("SHA-1").digest(Files.readAllBytes(file.toPath()))));
+                    String sparkSha1;
+                    URLConnection urlConnection = new URL("https://sparkapi.lucko.me/download/bukkit/sha1").openConnection();
+                    urlConnection.setReadTimeout(5000);
+                    urlConnection.setConnectTimeout(5000);
+                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()))) {
+                        sparkSha1 = reader.lines().collect(Collectors.joining(""));
+                    }
+
+                    if (fileSha1.equals(sparkSha1)) {
+                        shouldDownload = false;
+                    }
+                }
+
+                if (shouldDownload) {
+                    URLConnection urlConnection = new URL("https://sparkapi.lucko.me/download/bukkit").openConnection();
+                    urlConnection.setReadTimeout(5000);
+                    urlConnection.setConnectTimeout(5000);
+                    Files.copy(urlConnection.getInputStream(), file.toPath(), StandardCopyOption.REPLACE_EXISTING);
+                }
+
+                if (hasSpark()) {
+                     LOGGER.info("Purpur: Using user-provided spark plugin instead of our own.");
+                } else {
+                    super.registerProviders(entrypointHandler, context);
+                }
+
+            } catch (Exception e) {
+                LOGGER.error("Purpur: Failed to download and install spark plugin");
+                e.printStackTrace();
+            }
+        }
+    }
+
+    private static boolean hasSpark() {
+        for (PluginProvider<JavaPlugin> provider : LaunchEntryPointHandler.INSTANCE.get(Entrypoint.PLUGIN).getRegisteredProviders()) {
+            if (provider.getMeta().getName().equalsIgnoreCase("spark")) {
+                return true;
+            }
+        }
+        return false;
+    }
+}
