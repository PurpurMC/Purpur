From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: BillyGalbreath <blake.galbreath@gmail.com>
Date: Sat, 1 Oct 2022 16:01:07 -0500
Subject: [PATCH] Implement entity colors for rainglow fabric mod


diff --git a/src/main/java/net/minecraft/world/entity/GlowSquid.java b/src/main/java/net/minecraft/world/entity/GlowSquid.java
index 43cdda0cb26c5d5cc9025199eb71673d71c2abea..ac05a4f87cdbfa946d2700493921cde750b8f38d 100644
--- a/src/main/java/net/minecraft/world/entity/GlowSquid.java
+++ b/src/main/java/net/minecraft/world/entity/GlowSquid.java
@@ -18,6 +18,7 @@ import net.minecraft.world.level.block.Blocks;
 
 public class GlowSquid extends Squid {
     private static final EntityDataAccessor<Integer> DATA_DARK_TICKS_REMAINING = SynchedEntityData.defineId(GlowSquid.class, EntityDataSerializers.INT);
+    private static final EntityDataAccessor<String> SQUID_COLOR = SynchedEntityData.defineId(GlowSquid.class, EntityDataSerializers.STRING); // Purpur
 
     public GlowSquid(EntityType<? extends GlowSquid> type, Level world) {
         super(type, world);
@@ -65,6 +66,7 @@ public class GlowSquid extends Squid {
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(DATA_DARK_TICKS_REMAINING, 0);
+        this.entityData.define(SQUID_COLOR, level().purpurConfig.glowSquidColorMode.getRandom(this.random).toString()); // Purpur
     }
 
     @Override
@@ -91,12 +93,18 @@ public class GlowSquid extends Squid {
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
         nbt.putInt("DarkTicksRemaining", this.getDarkTicksRemaining());
+        nbt.putString(org.purpurmc.purpur.entity.RainglowColor.RAINGLOW_KEY, this.entityData.get(SQUID_COLOR)); // Purpur
     }
 
     @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
         this.setDarkTicks(nbt.getInt("DarkTicksRemaining"));
+        // Purpur start
+        if (nbt.contains(org.purpurmc.purpur.entity.RainglowColor.RAINGLOW_KEY)) {
+            this.entityData.set(SQUID_COLOR, nbt.getString(org.purpurmc.purpur.entity.RainglowColor.RAINGLOW_KEY));
+        }
+        // Purpur end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
index 7166f4a39fd615e10d7b1f53c57363832a41f365..24f9379767317cb7ea1ec15712cbf3b352823f64 100644
--- a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
@@ -84,6 +84,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
     private static final double RIDING_OFFSET = 0.4D;
     private static final EntityDataAccessor<Boolean> DATA_DANCING = SynchedEntityData.defineId(Allay.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_CAN_DUPLICATE = SynchedEntityData.defineId(Allay.class, EntityDataSerializers.BOOLEAN);
+    private static final EntityDataAccessor<String> ALLAY_COLOR = SynchedEntityData.defineId(Allay.class, EntityDataSerializers.STRING); // Purpur
     protected static final ImmutableList<SensorType<? extends Sensor<? super Allay>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.HURT_BY, SensorType.NEAREST_ITEMS);
     protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.PATH, MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.HURT_BY, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.LIKED_PLAYER, MemoryModuleType.LIKED_NOTEBLOCK_POSITION, MemoryModuleType.LIKED_NOTEBLOCK_COOLDOWN_TICKS, MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS, MemoryModuleType.IS_PANICKING, new MemoryModuleType[0]);
     public static final ImmutableList<Float> THROW_SOUND_PITCHES = ImmutableList.of(0.5625F, 0.625F, 0.75F, 0.9375F, 1.0F, 1.0F, 1.125F, 1.25F, 1.5F, 1.875F, 2.0F, 2.25F, new Float[]{2.5F, 3.0F, 3.75F, 4.0F});
@@ -187,6 +188,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         super.defineSynchedData();
         this.entityData.define(Allay.DATA_DANCING, false);
         this.entityData.define(Allay.DATA_CAN_DUPLICATE, true);
+        this.entityData.define(ALLAY_COLOR, level().purpurConfig.allayColorMode.getRandom(this.random).toString()); // Purpur
     }
 
     @Override
@@ -557,6 +559,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         });
         nbt.putLong("DuplicationCooldown", this.duplicationCooldown);
         nbt.putBoolean("CanDuplicate", this.canDuplicate());
+        nbt.putString(org.purpurmc.purpur.entity.RainglowColor.RAINGLOW_KEY, this.entityData.get(ALLAY_COLOR)); // Purpur
     }
 
     @Override
@@ -575,6 +578,11 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
 
         this.duplicationCooldown = nbt.getLong("DuplicationCooldown"); // Paper - Load as long
         this.entityData.set(Allay.DATA_CAN_DUPLICATE, nbt.getBoolean("CanDuplicate"));
+        // Purpur start
+        if (nbt.contains(org.purpurmc.purpur.entity.RainglowColor.RAINGLOW_KEY)) {
+            this.entityData.set(ALLAY_COLOR, nbt.getString(org.purpurmc.purpur.entity.RainglowColor.RAINGLOW_KEY));
+        }
+        // Purpur end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index 467337542551dedc05d922bb3a37b811aeef4d7b..22de3ffc674b8d0217e75d7923220e8afebebd10 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -58,6 +58,7 @@ import org.bukkit.event.entity.SlimeSplitEvent;
 public class Slime extends Mob implements Enemy {
 
     private static final EntityDataAccessor<Integer> ID_SIZE = SynchedEntityData.defineId(Slime.class, EntityDataSerializers.INT);
+    private static final EntityDataAccessor<String> SLIME_COLOR = SynchedEntityData.defineId(Slime.class, EntityDataSerializers.STRING); // Purpur
     public static final int MIN_SIZE = 1;
     public static final int MAX_SIZE = 127;
     public float targetSquish;
@@ -165,6 +166,7 @@ public class Slime extends Mob implements Enemy {
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Slime.ID_SIZE, 1);
+        this.entityData.define(SLIME_COLOR, level().purpurConfig.slimeColorMode.getRandom(this.random).toString()); // Purpur
     }
 
     @VisibleForTesting
@@ -194,6 +196,7 @@ public class Slime extends Mob implements Enemy {
         nbt.putBoolean("Paper.canWander", this.canWander); // Paper
         nbt.putInt("Size", this.getSize() - 1);
         nbt.putBoolean("wasOnGround", this.wasOnGround);
+        nbt.putString(org.purpurmc.purpur.entity.RainglowColor.RAINGLOW_KEY, this.entityData.get(SLIME_COLOR)); // Purpur
     }
 
     @Override
@@ -206,6 +209,11 @@ public class Slime extends Mob implements Enemy {
         }
         // Paper end
         this.wasOnGround = nbt.getBoolean("wasOnGround");
+        // Purpur start
+        if (nbt.contains(org.purpurmc.purpur.entity.RainglowColor.RAINGLOW_KEY)) {
+            this.entityData.set(SLIME_COLOR, nbt.getString(org.purpurmc.purpur.entity.RainglowColor.RAINGLOW_KEY));
+        }
+        // Purpur end
     }
 
     public boolean isTiny() {
diff --git a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
index 517e0f7ce91183a1473d773a2145867b94181c6a..3128a1c4f7c70ad09a30a7f02adc5c35b2b91595 100644
--- a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
+++ b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
@@ -1064,12 +1064,14 @@ public class PurpurWorldConfig {
     public boolean allayRidableInWater = true;
     public boolean allayControllable = true;
     public List<String> allayRespectNBT = new ArrayList<>();
+    public RainglowColor.Mode allayColorMode = RainglowColor.Mode.RAINBOW;
     private void allaySettings() {
         allayRidable = getBoolean("mobs.allay.ridable", allayRidable);
         allayRidableInWater = getBoolean("mobs.allay.ridable-in-water", allayRidableInWater);
         allayControllable = getBoolean("mobs.allay.controllable", allayControllable);
         allayRespectNBT.clear();
         getList("mobs.allay.respect-nbt", new ArrayList<>()).forEach(key -> allayRespectNBT.add(key.toString()));
+        allayColorMode = RainglowColor.Mode.get(getString("mobs.allay.rainglow-mode", allayColorMode.toString()));
     }
 
     public boolean axolotlRidable = false;
@@ -1681,6 +1683,7 @@ public class PurpurWorldConfig {
     public boolean glowSquidsCanFly = false;
     public boolean glowSquidTakeDamageFromWater = false;
     public boolean glowSquidAlwaysDropExp = false;
+    public RainglowColor.Mode glowSquidColorMode = RainglowColor.Mode.RAINBOW;
     private void glowSquidSettings() {
         glowSquidRidable = getBoolean("mobs.glow_squid.ridable", glowSquidRidable);
         glowSquidControllable = getBoolean("mobs.glow_squid.controllable", glowSquidControllable);
@@ -1688,6 +1691,7 @@ public class PurpurWorldConfig {
         glowSquidsCanFly = getBoolean("mobs.glow_squid.can-fly", glowSquidsCanFly);
         glowSquidTakeDamageFromWater = getBoolean("mobs.glow_squid.takes-damage-from-water", glowSquidTakeDamageFromWater);
         glowSquidAlwaysDropExp = getBoolean("mobs.glow_squid.always-drop-exp", glowSquidAlwaysDropExp);
+        glowSquidColorMode = RainglowColor.Mode.get(getString("mobs.glow_squid.rainglow-mode", glowSquidColorMode.toString()));
     }
 
     public boolean goatRidable = false;
@@ -2500,6 +2504,7 @@ public class PurpurWorldConfig {
     public Map<Integer, Double> slimeAttackDamageCache = new HashMap<>();
     public boolean slimeTakeDamageFromWater = false;
     public boolean slimeAlwaysDropExp = false;
+    public RainglowColor.Mode slimeColorMode = RainglowColor.Mode.RAINBOW;
     private void slimeSettings() {
         slimeRidable = getBoolean("mobs.slime.ridable", slimeRidable);
         slimeRidableInWater = getBoolean("mobs.slime.ridable-in-water", slimeRidableInWater);
@@ -2515,6 +2520,7 @@ public class PurpurWorldConfig {
         slimeAttackDamageCache.clear();
         slimeTakeDamageFromWater = getBoolean("mobs.slime.takes-damage-from-water", slimeTakeDamageFromWater);
         slimeAlwaysDropExp = getBoolean("mobs.slime.always-drop-exp", slimeAlwaysDropExp);
+        slimeColorMode = RainglowColor.Mode.get(getString("mobs.slime.rainglow-mode", slimeColorMode.toString()));
     }
 
     public boolean snowGolemRidable = false;
diff --git a/src/main/java/org/purpurmc/purpur/entity/RainglowColor.java b/src/main/java/org/purpurmc/purpur/entity/RainglowColor.java
new file mode 100644
index 0000000000000000000000000000000000000000..03d754720f4d6c6f6fe0a39da0c54a8fd60b36b4
--- /dev/null
+++ b/src/main/java/org/purpurmc/purpur/entity/RainglowColor.java
@@ -0,0 +1,62 @@
+package org.purpurmc.purpur.entity;
+
+import net.minecraft.util.RandomSource;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+
+public enum RainglowColor {
+    BLACK, BLUE, BROWN, CYAN, GRAY, GREEN, INDIGO, LIGHT_BLUE, LIGHT_GRAY, LIME, MAGENTA, ORANGE, PINK, PURPLE, RED, WHITE, YELLOW;
+
+    public static final String RAINGLOW_KEY = "Colour";
+
+    @Override
+    public String toString() {
+        return this.name().toLowerCase(Locale.ROOT);
+    }
+
+    public enum Mode {
+        ALL_COLOURS(BLUE, RED, GREEN, PINK, YELLOW, ORANGE, INDIGO, PURPLE, WHITE, GRAY, BLACK),
+        ARO_PRIDE(BLACK, GRAY, WHITE, GREEN),
+        ACE_PRIDE(BLACK, GRAY, WHITE, PURPLE),
+        BI_PRIDE(BLUE, PINK, PURPLE),
+        GENDERFLUID_PRIDE(PURPLE, WHITE, BLACK, PINK, BLUE),
+        LESBIAN_PRIDE(RED, ORANGE, WHITE, PINK, PURPLE),
+        MONOCHROME(BLACK, GRAY, WHITE),
+        ENBY_PRIDE(YELLOW, WHITE, BLACK, PURPLE),
+        PAN_PRIDE(PINK, YELLOW, BLUE),
+        RAINBOW(RED, ORANGE, YELLOW, GREEN, BLUE, INDIGO, PURPLE),
+        TRANS_PRIDE(BLUE, WHITE, PINK),
+        VANILLA(BLUE);
+
+        private static final Map<String, Mode> BY_NAME = new HashMap<>();
+
+        static {
+            Arrays.stream(values()).forEach(mode -> BY_NAME.put(mode.name(), mode));
+        }
+
+        private final List<RainglowColor> colors = new ArrayList<>();
+
+        Mode(RainglowColor... colors) {
+            this.colors.addAll(Arrays.stream(colors).toList());
+        }
+
+        public static Mode get(String string) {
+            Mode mode = BY_NAME.get(string.toUpperCase(Locale.ROOT));
+            return mode == null ? RAINBOW : mode;
+        }
+
+        public RainglowColor getRandom(RandomSource random) {
+            return this.colors.get(random.nextInt(this.colors.size()));
+        }
+
+        @Override
+        public String toString() {
+            return this.name().toLowerCase(Locale.ROOT);
+        }
+    }
+}
