From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: William Blake Galbreath <Blake.Galbreath@GMail.com>
Date: Tue, 23 Jul 2019 08:28:21 -0500
Subject: [PATCH] |FEAT| Configurable villager brain ticks

Controls the number of times a villager's brain can tick. Skipping brain ticks
leads to less lag, but comes at a cost of slower reaction times.

$-----------------------------$
mobs:
  villager:
    brain-ticks:
      default: 1
      description: |-
        How often (in ticks) should villager's tick their brain logic. Vanilla value is to tick every tick (1).
        Higher amounts makes them tick less often to reduce lag, but setting it too high could result in unresponsive villagers
    use-brain-ticks-only-when-lagging:
      default: true
      description: |-
        Only use the brain ticks setting when the server is lagging (see settings.lagging-threshold).
        If set to false the mobs.villager.brain-ticks setting is always used
$-----------------------------$

diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 682feb6f3c109b0b3034f3942f7dfa73721d359b..14b27c84624467615ad7cc4d5df94cd60fccb8f0 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -141,6 +141,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }, MemoryModuleType.MEETING_POINT, (entityvillager, villageplacetype) -> {
         return villageplacetype == PoiType.MEETING;
     });
+    private final int brainTickOffset; // Purpur
 
     public long nextGolemPanic = -1; // Airplane
 
@@ -155,6 +156,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         this.getNavigation().setCanFloat(true);
         this.setCanPickUpLoot(true);
         this.setVillagerData(this.getVillagerData().setType(type).setProfession(VillagerProfession.NONE));
+        this.brainTickOffset = getRandom().nextInt(100); // Purpur
     }
 
     // Purpur start
@@ -274,9 +276,13 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     protected void customServerAiStep() { mobTick(false); }
     protected void mobTick(boolean inactive) {
         this.level.getProfiler().push("villagerBrain");
+        // Purpur start
+        boolean tick = (level.getGameTime() + brainTickOffset) % level.purpurConfig.villagerBrainTicks == 0;
+        if (((ServerLevel) level).getServer().lagging ? tick : level.purpurConfig.villagerUseBrainTicksOnlyWhenLagging || tick)
+        // Purpur end
         // Airplane start
         if (!inactive) {
-            if (this.behaviorTick++ % this.activatedPriority == 0) // Airplane
+            if (level.purpurConfig.villagerBrainTicks != 1 || this.behaviorTick++ % this.activatedPriority == 0) // Airplane // Purpur
             this.getBrain().tick((ServerLevel) this.level, this);
          }
         // Airplane end
diff --git a/src/main/java/net/pl3x/purpur/PurpurWorldConfig.java b/src/main/java/net/pl3x/purpur/PurpurWorldConfig.java
index 8e9ba3a8582c8e5d1e14bf3bfa8ecfce5ccf7b0c..6df320ab8214669517d5de30a28f044a5a6b4a33 100644
--- a/src/main/java/net/pl3x/purpur/PurpurWorldConfig.java
+++ b/src/main/java/net/pl3x/purpur/PurpurWorldConfig.java
@@ -1077,6 +1077,8 @@ public class PurpurWorldConfig {
     public boolean villagerRidable = false;
     public boolean villagerRidableInWater = false;
     public double villagerMaxHealth = 20.0D;
+    public int villagerBrainTicks = 1;
+    public boolean villagerUseBrainTicksOnlyWhenLagging = true;
     private void villagerSettings() {
         villagerRidable = getBoolean("mobs.villager.ridable", villagerRidable);
         villagerRidableInWater = getBoolean("mobs.villager.ridable-in-water", villagerRidableInWater);
@@ -1086,6 +1088,8 @@ public class PurpurWorldConfig {
             set("mobs.villager.attributes.max_health", oldValue);
         }
         villagerMaxHealth = getDouble("mobs.villager.attributes.max_health", villagerMaxHealth);
+        villagerBrainTicks = getInt("mobs.villager.brain-ticks", villagerBrainTicks);
+        villagerUseBrainTicksOnlyWhenLagging = getBoolean("mobs.villager.use-brain-ticks-only-when-lagging", villagerUseBrainTicksOnlyWhenLagging);
     }
 
     public boolean vindicatorRidable = false;
