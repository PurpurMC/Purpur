From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: jmp <jasonpenilla2@me.com>
Date: Tue, 25 Aug 2020 20:44:08 -0700
Subject: [PATCH] Bad omen cooldown and configurable length


diff --git a/src/main/java/net/minecraft/server/EntityRaider.java b/src/main/java/net/minecraft/server/EntityRaider.java
index 68eaaf86b..96bcbdba0 100644
--- a/src/main/java/net/minecraft/server/EntityRaider.java
+++ b/src/main/java/net/minecraft/server/EntityRaider.java
@@ -11,6 +11,10 @@ import javax.annotation.Nullable;
 
 public abstract class EntityRaider extends EntityMonsterPatrolling {
 
+    // Purpur start
+    private static final java.util.Map<java.util.UUID, Long> lastRaidCache = new java.util.HashMap<>();
+    public final Predicate<java.util.UUID> canStartRaid = uuid -> world.purpurConfig.badOmenCooldownSeconds == 0 || !lastRaidCache.containsKey(uuid) || (System.currentTimeMillis() - lastRaidCache.get(uuid)) / 1000 > world.purpurConfig.badOmenCooldownSeconds;
+    // Purpur end
     protected static final DataWatcherObject<Boolean> c = DataWatcher.a(EntityRaider.class, DataWatcherRegistry.i);
     private static final Predicate<EntityItem> b = (entityitem) -> {
         return !entityitem.p() && entityitem.isAlive() && ItemStack.matches(entityitem.getItemStack(), Raid.s());
@@ -128,9 +132,12 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
                     }
 
                     i = MathHelper.clamp(i, 0, 4);
-                    MobEffect mobeffect1 = new MobEffect(MobEffects.BAD_OMEN, 120000, i, false, false, true);
+                    MobEffect mobeffect1 = new MobEffect(MobEffects.BAD_OMEN, world.purpurConfig.badOmenLengthTicks, i, false, false, true); // Purpur - bad omen length
 
-                    if (!this.world.getGameRules().getBoolean(GameRules.DISABLE_RAIDS)) {
+                    // Purpur start
+                    if (!this.world.getGameRules().getBoolean(GameRules.DISABLE_RAIDS) && this.canStartRaid.test(entityhuman.getUniqueID())) {
+                        lastRaidCache.put(entityhuman.getUniqueID(), java.lang.System.currentTimeMillis());
+                        // Purpur end
                         entityhuman.addEffect(mobeffect1, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.PATROL_CAPTAIN); // CraftBukkit
                     }
                 }
diff --git a/src/main/java/net/pl3x/purpur/PurpurWorldConfig.java b/src/main/java/net/pl3x/purpur/PurpurWorldConfig.java
index dc5aca557..1407801ad 100644
--- a/src/main/java/net/pl3x/purpur/PurpurWorldConfig.java
+++ b/src/main/java/net/pl3x/purpur/PurpurWorldConfig.java
@@ -153,6 +153,8 @@ public class PurpurWorldConfig {
     public boolean fixClimbingBypassingCrammingRule = false;
     public boolean milkCuresBadOmen = true;
     public boolean saveProjectilesToDisk = true;
+    public int badOmenCooldownSeconds = 0;
+    public int badOmenLengthTicks = 120000;
     public double tridentLoyaltyVoidReturnHeight = 0.0D;
     public double voidDamageHeight = -64.0D;
     private void miscGameplayMechanicsSettings() {
@@ -164,6 +166,8 @@ public class PurpurWorldConfig {
         fixClimbingBypassingCrammingRule = getBoolean("gameplay-mechanics.fix-climbing-bypassing-cramming-rule", fixClimbingBypassingCrammingRule);
         milkCuresBadOmen = getBoolean("gameplay-mechanics.milk-cures-bad-omen", milkCuresBadOmen);
         saveProjectilesToDisk = getBoolean("gameplay-mechanics.save-projectiles-to-disk", saveProjectilesToDisk);
+        badOmenCooldownSeconds = getInt("gameplay-mechanics.bad-omen-cooldown-seconds", badOmenCooldownSeconds);
+        badOmenLengthTicks = getInt("gameplay-mechanics.bad-omen-length-ticks", badOmenLengthTicks);
         tridentLoyaltyVoidReturnHeight = getDouble("gameplay-mechanics.trident-loyalty-void-return-height", tridentLoyaltyVoidReturnHeight);
         voidDamageHeight = getDouble("gameplay-mechanics.void-damage-height", voidDamageHeight);
     }
