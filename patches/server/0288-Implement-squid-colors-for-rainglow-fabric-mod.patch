From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: BillyGalbreath <blake.galbreath@gmail.com>
Date: Sat, 1 Oct 2022 16:01:07 -0500
Subject: [PATCH] Implement squid colors for rainglow fabric mod


diff --git a/src/main/java/net/minecraft/world/entity/GlowSquid.java b/src/main/java/net/minecraft/world/entity/GlowSquid.java
index c2309434b4d48a44587590623ac98dbf997b9578..6f723171fa71d74b351b5cf0cd167bb6f7ca1691 100644
--- a/src/main/java/net/minecraft/world/entity/GlowSquid.java
+++ b/src/main/java/net/minecraft/world/entity/GlowSquid.java
@@ -18,6 +18,7 @@ import net.minecraft.world.level.block.Blocks;
 
 public class GlowSquid extends Squid {
     private static final EntityDataAccessor<Integer> DATA_DARK_TICKS_REMAINING = SynchedEntityData.defineId(GlowSquid.class, EntityDataSerializers.INT);
+    private static final net.minecraft.network.syncher.EntityDataAccessor<String> SQUID_COLOR = net.minecraft.network.syncher.SynchedEntityData.defineId(GlowSquid.class, net.minecraft.network.syncher.EntityDataSerializers.STRING); // Purpur
 
     public GlowSquid(EntityType<? extends GlowSquid> type, Level world) {
         super(type, world);
@@ -65,6 +66,7 @@ public class GlowSquid extends Squid {
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(DATA_DARK_TICKS_REMAINING, 0);
+        this.entityData.define(SQUID_COLOR, this.level.purpurConfig.glowSquidColorMode.getRandom(this.random).toString()); // Purpur
     }
 
     @Override
@@ -91,12 +93,14 @@ public class GlowSquid extends Squid {
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
         nbt.putInt("DarkTicksRemaining", this.getDarkTicksRemaining());
+        nbt.putString("Colour", this.entityData.get(SQUID_COLOR)); // Purpur - key must match rainglow
     }
 
     @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
         this.setDarkTicks(nbt.getInt("DarkTicksRemaining"));
+        if (nbt.contains("Colour")) this.entityData.set(SQUID_COLOR, nbt.getString("Colour")); // Purpur - key must match rainglow
     }
 
     @Override
diff --git a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
index 1b5d3d214b7390cb960f5ee180a21a2bc54e8123..eb35509626914354af3b6a54387b5e9673766697 100644
--- a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
+++ b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
@@ -1679,6 +1679,7 @@ public class PurpurWorldConfig {
     public boolean glowSquidsCanFly = false;
     public boolean glowSquidTakeDamageFromWater = false;
     public boolean glowSquidAlwaysDropExp = false;
+    public GlowSquidColor.Mode glowSquidColorMode = GlowSquidColor.Mode.RAINBOW;
     private void glowSquidSettings() {
         glowSquidRidable = getBoolean("mobs.glow_squid.ridable", glowSquidRidable);
         glowSquidControllable = getBoolean("mobs.glow_squid.controllable", glowSquidControllable);
@@ -1686,6 +1687,7 @@ public class PurpurWorldConfig {
         glowSquidsCanFly = getBoolean("mobs.glow_squid.can-fly", glowSquidsCanFly);
         glowSquidTakeDamageFromWater = getBoolean("mobs.glow_squid.takes-damage-from-water", glowSquidTakeDamageFromWater);
         glowSquidAlwaysDropExp = getBoolean("mobs.glow_squid.always-drop-exp", glowSquidAlwaysDropExp);
+        glowSquidColorMode = GlowSquidColor.Mode.get(getString("mobs.glow_squid.rainglow-mode", glowSquidColorMode.toString()));
     }
 
     public boolean goatRidable = false;
diff --git a/src/main/java/org/purpurmc/purpur/entity/GlowSquidColor.java b/src/main/java/org/purpurmc/purpur/entity/GlowSquidColor.java
new file mode 100644
index 0000000000000000000000000000000000000000..c90256f4c16ffdb2d8e767e837ea36ac7a6613be
--- /dev/null
+++ b/src/main/java/org/purpurmc/purpur/entity/GlowSquidColor.java
@@ -0,0 +1,61 @@
+package org.purpurmc.purpur.entity;
+
+import net.minecraft.util.RandomSource;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+
+public enum GlowSquidColor {
+    BLUE, RED, GREEN, PINK, YELLOW, ORANGE, INDIGO, PURPLE, WHITE, GRAY, BLACK;
+
+    @Override
+    public String toString() {
+        return this.name().toLowerCase(Locale.ROOT);
+    }
+
+    public enum Mode {
+        RAINBOW(RED, ORANGE, YELLOW, GREEN, BLUE, INDIGO, PURPLE),
+        ALL_COLORS(BLUE, RED, GREEN, PINK, YELLOW, ORANGE, INDIGO, PURPLE, WHITE, GRAY, BLACK),
+        TRANS_PRIDE(BLUE, WHITE, PINK),
+        LESBIAN_PRIDE(RED, ORANGE, WHITE, PINK, PURPLE),
+        BI_PRIDE(BLUE, PINK, PURPLE),
+        GAY_PRIDE(BLUE, GREEN, WHITE),
+        PAN_PRIDE(PINK, YELLOW, BLUE),
+        ACE_PRIDE(BLACK, GRAY, WHITE, PURPLE),
+        ARO_PRIDE(BLACK, GRAY, WHITE, GREEN),
+        ENBY_PRIDE(YELLOW, WHITE, BLACK, PURPLE),
+        GENDERFLUID(PURPLE, WHITE, BLACK, PINK, BLUE),
+        MONOCHROME(BLACK, GRAY, WHITE),
+        VANILLA(BLUE);
+
+        private static final Map<String, Mode> BY_NAME = new HashMap<>();
+
+        static {
+            Arrays.stream(values()).forEach(mode -> BY_NAME.put(mode.name(), mode));
+        }
+
+        private final List<GlowSquidColor> colors = new ArrayList<>();
+
+        Mode(GlowSquidColor... colors) {
+            this.colors.addAll(Arrays.stream(colors).toList());
+        }
+
+        public static Mode get(String string) {
+            Mode mode = BY_NAME.get(string.toUpperCase(Locale.ROOT));
+            return mode == null ? RAINBOW : mode;
+        }
+
+        public GlowSquidColor getRandom(RandomSource random) {
+            return this.colors.get(random.nextInt(this.colors.size()));
+        }
+
+        @Override
+        public String toString() {
+            return this.name().toLowerCase(Locale.ROOT);
+        }
+    }
+}
