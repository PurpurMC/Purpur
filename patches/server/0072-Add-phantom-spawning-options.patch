From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: William Blake Galbreath <blake.galbreath@gmail.com>
Date: Fri, 3 Jul 2020 00:03:52 -0500
Subject: [PATCH] Add phantom spawning options


diff --git a/src/main/java/net/minecraft/world/level/levelgen/PhantomSpawner.java b/src/main/java/net/minecraft/world/level/levelgen/PhantomSpawner.java
index 6b5c31470499e25d01936106839c2fff21b113c8..9c22c6c27e4680c3e3fbdb3319e3da6d1fe5bd98 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/PhantomSpawner.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/PhantomSpawner.java
@@ -41,8 +41,8 @@ public class PhantomSpawner implements CustomSpawner {
             if (this.nextTick > 0) {
                 return 0;
             } else {
-                this.nextTick += (60 + randomsource.nextInt(60)) * 20;
-                if (world.getSkyDarken() < 5 && world.dimensionType().hasSkyLight()) {
+                this.nextTick += world.purpurConfig().mobs.phantom.spawning.delayMin + randomsource.nextInt(world.purpurConfig().mobs.phantom.spawning.delayMax - world.purpurConfig().mobs.phantom.spawning.delayMin + 1); // Purpur
+                if (world.getSkyDarken() < world.purpurConfig().mobs.phantom.spawning.minDarkness && world.dimensionType().hasSkyLight()) { // Purpur
                     return 0;
                 } else {
                     int i = 0;
@@ -54,22 +54,22 @@ public class PhantomSpawner implements CustomSpawner {
                         if (!entityhuman.isSpectator() && (!world.paperConfig().entities.behavior.phantomsDoNotSpawnOnCreativePlayers || !entityhuman.isCreative())) { // Paper
                             BlockPos blockposition = entityhuman.blockPosition();
 
-                            if (!world.dimensionType().hasSkyLight() || blockposition.getY() >= world.getSeaLevel() && world.canSeeSky(blockposition)) {
+                            if (!world.dimensionType().hasSkyLight() || (!world.purpurConfig().mobs.phantom.spawning.onlyAboveSeaLevel || blockposition.getY() >= world.getSeaLevel()) && (!world.purpurConfig().mobs.phantom.spawning.onlyWithVisibleSky || world.canSeeSky(blockposition))) { // Purpur
                                 DifficultyInstance difficultydamagescaler = world.getCurrentDifficultyAt(blockposition);
 
-                                if (difficultydamagescaler.isHarderThan(randomsource.nextFloat() * 3.0F)) {
+                                if (difficultydamagescaler.isHarderThan(randomsource.nextFloat() * (float) world.purpurConfig().mobs.phantom.spawning.localDifficultyChance)) { // Purpur
                                     ServerStatsCounter serverstatisticmanager = ((ServerPlayer) entityhuman).getStats();
                                     int j = Mth.clamp(serverstatisticmanager.getValue(Stats.CUSTOM.get(Stats.TIME_SINCE_REST)), (int) 1, Integer.MAX_VALUE);
                                     boolean flag2 = true;
 
-                                    if (randomsource.nextInt(j) >= 72000) {
-                                        BlockPos blockposition1 = blockposition.above(20 + randomsource.nextInt(15)).east(-10 + randomsource.nextInt(21)).south(-10 + randomsource.nextInt(21));
+                                    if (randomsource.nextInt(j) >= world.purpurConfig().mobs.phantom.spawning.minTimeSinceSlept) { // Purpur
+                                        BlockPos blockposition1 = blockposition.above(world.purpurConfig().mobs.phantom.spawning.minOverhead + randomsource.nextInt(world.purpurConfig().mobs.phantom.spawning.maxOverhead - world.purpurConfig().mobs.phantom.spawning.minOverhead + 1)).east(-world.purpurConfig().mobs.phantom.spawning.overheadRadius + randomsource.nextInt(world.purpurConfig().mobs.phantom.spawning.overheadRadius * 2 + 1)).south(-world.purpurConfig().mobs.phantom.spawning.overheadRadius + randomsource.nextInt(world.purpurConfig().mobs.phantom.spawning.overheadRadius * 2 + 1)); // Purpur
                                         BlockState iblockdata = world.getBlockState(blockposition1);
                                         FluidState fluid = world.getFluidState(blockposition1);
 
                                         if (NaturalSpawner.isValidEmptySpawnBlock(world, blockposition1, iblockdata, fluid, EntityType.PHANTOM)) {
                                             SpawnGroupData groupdataentity = null;
-                                            int k = 1 + randomsource.nextInt(difficultydamagescaler.getDifficulty().getId() + 1);
+                                            int k = world.purpurConfig().mobs.phantom.spawning.minPerAttempt + world.random.nextInt((world.purpurConfig().mobs.phantom.spawning.maxPerAttempt < 0 ? difficultydamagescaler.getDifficulty().getId() : world.purpurConfig().mobs.phantom.spawning.maxPerAttempt - world.purpurConfig().mobs.phantom.spawning.minPerAttempt) + 1); // Purpur
 
                                             for (int l = 0; l < k; ++l) {
                                                 // Paper start
diff --git a/src/main/java/org/purpurmc/purpur/configuration/PurpurWorldConfiguration.java b/src/main/java/org/purpurmc/purpur/configuration/PurpurWorldConfiguration.java
index 6d6b9765ec2da89575eaf3ca13acfe24a1953266..62cbf0ca78da66feb755d46fe407a24b262f71da 100644
--- a/src/main/java/org/purpurmc/purpur/configuration/PurpurWorldConfiguration.java
+++ b/src/main/java/org/purpurmc/purpur/configuration/PurpurWorldConfiguration.java
@@ -695,6 +695,22 @@ public class PurpurWorldConfiguration extends ConfigurationPart {
                 public double attackRadius = 0.0D;
                 public float damage = 1.0F;
             }
+
+            public Spawning spawning;
+            public class Spawning extends ConfigurationPart {
+                public int delayMin = 1200;
+                public int delayMax = 2400;
+                public int minDarkness = 5;
+                public boolean onlyAboveSeaLevel = true;
+                public boolean onlyWithVisibleSky = true;
+                public double localDifficultyChance = 3.0D;
+                public int minTimeSinceSlept = 72000;
+                public int minOverhead = 20;
+                public int maxOverhead = 35;
+                public int overheadRadius = 10;
+                public int minPerAttempt = 1;
+                public int maxPerAttempt = -1;
+            }
         }
 
         public Pig pig;
