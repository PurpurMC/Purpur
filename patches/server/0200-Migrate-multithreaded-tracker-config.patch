From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Encode42 <me@encode42.dev>
Date: Thu, 22 Apr 2021 23:16:26 -0400
Subject: [PATCH] Migrate multithreaded tracker config


diff --git a/src/main/java/gg/airplane/AirplaneConfig.java b/src/main/java/gg/airplane/AirplaneConfig.java
index 5a20ad857b7c550281000e8d94dac78d72591f31..15398d066d1bcd71765fdda1302d1b71efe96018 100644
--- a/src/main/java/gg/airplane/AirplaneConfig.java
+++ b/src/main/java/gg/airplane/AirplaneConfig.java
@@ -95,18 +95,4 @@ public class AirplaneConfig {
         }
     }
 
-
-    public static boolean multithreadedEntityTracker = false;
-    public static boolean entityTrackerAsyncPackets = false;
-
-    private static void entityTracker() {
-        config.setComment("tracker", "Options to improve the performance of the entity tracker");
-
-        multithreadedEntityTracker = config.getBoolean("tracker.multithreaded", multithreadedEntityTracker,
-          "This enables the multithreading of the tracker.");
-        entityTrackerAsyncPackets = config.getBoolean("tracker.unsafe-async-packets", entityTrackerAsyncPackets,
-          "This option can break plugins that assume packets from the",
-          "entity tracker will be sent sync.");
-    }
-
 }
diff --git a/src/main/java/net/minecraft/server/level/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/level/EntityTrackerEntry.java
index b773480baef218d0aab2f524e7e305c18443517d..822ff1129e10d111b9989b38cc412000b5da15da 100644
--- a/src/main/java/net/minecraft/server/level/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/level/EntityTrackerEntry.java
@@ -76,7 +76,7 @@ public class EntityTrackerEntry {
      * Requested in https://github.com/PaperMC/Paper/issues/1537 to allow intercepting packets
      */
     public void sendPlayerPacket(EntityPlayer player, Packet packet) {
-        if (!gg.airplane.AirplaneConfig.entityTrackerAsyncPackets && !org.bukkit.Bukkit.isPrimaryThread()) {
+        if (!net.pl3x.purpur.PurpurConfig.entityTrackerAsyncPackets && !org.bukkit.Bukkit.isPrimaryThread()) { // Purpur - migrate tracker options
             this.b.chunkProvider.playerChunkMap.trackerEnsureMain(() -> sendPlayerPacket(player, packet));
             return;
         }
@@ -480,7 +480,7 @@ public class EntityTrackerEntry {
     // Paper end
 
     private void broadcastIncludingSelf(Packet<?> packet) {
-        if (!gg.airplane.AirplaneConfig.entityTrackerAsyncPackets && !org.bukkit.Bukkit.isPrimaryThread()) {
+        if (!net.pl3x.purpur.PurpurConfig.entityTrackerAsyncPackets && !org.bukkit.Bukkit.isPrimaryThread()) { // Purpur - migrate tracker options
             this.b.chunkProvider.playerChunkMap.trackerEnsureMain(() -> broadcastIncludingSelf(packet));
             return;
         }
diff --git a/src/main/java/net/minecraft/server/level/PlayerChunkMap.java b/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
index 4f11a19137531a0406a5214cd0cce0bea06d0088..b53f6916971481a49f54b066055ff8a5f91bdc24 100644
--- a/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
@@ -2218,7 +2218,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         try {
             // Airplane start - multithreaded tracker
             if (this.trackQueue == null) this.trackQueue = new gg.airplane.structs.TrackQueue(this.world.getChunkProvider().entityTickingChunks, trackerMainQueue);
-            if (gg.airplane.AirplaneConfig.multithreadedEntityTracker) {
+            if (net.pl3x.purpur.PurpurConfig.multithreadedEntityTracker) { // Purpur - migrate tracker options
                 this.trackQueue.start();
                 return;
             }
@@ -2552,7 +2552,7 @@ Sections go from 0..16. Now whenever a section is not empty, it can potentially
 
         public synchronized void broadcast(Packet<?> packet) { // Airplane - synchronized for tracked player
             // Airplane start
-            if (!gg.airplane.AirplaneConfig.entityTrackerAsyncPackets && !org.bukkit.Bukkit.isPrimaryThread()) {
+            if (!net.pl3x.purpur.PurpurConfig.entityTrackerAsyncPackets && !org.bukkit.Bukkit.isPrimaryThread()) { // Purpur - migrate tracker options
                 trackerEnsureMain(() -> broadcast(packet));
                 return;
             }
@@ -2569,7 +2569,7 @@ Sections go from 0..16. Now whenever a section is not empty, it can potentially
 
         public void broadcastIncludingSelf(Packet<?> packet) {
             // Airplane start
-            if (!gg.airplane.AirplaneConfig.entityTrackerAsyncPackets && !org.bukkit.Bukkit.isPrimaryThread()) {
+            if (!net.pl3x.purpur.PurpurConfig.entityTrackerAsyncPackets && !org.bukkit.Bukkit.isPrimaryThread()) { // Purpur - migrate tracker options
                 trackerEnsureMain(() -> broadcastIncludingSelf(packet));
                 return;
             }
diff --git a/src/main/java/net/pl3x/purpur/PurpurConfig.java b/src/main/java/net/pl3x/purpur/PurpurConfig.java
index 6355f246809982f6da34671be22066a83cfba42c..31b43d6ea71eda8af38118c39fc66a216aa0dda8 100644
--- a/src/main/java/net/pl3x/purpur/PurpurConfig.java
+++ b/src/main/java/net/pl3x/purpur/PurpurConfig.java
@@ -1,6 +1,8 @@
 package net.pl3x.purpur;
 
 import co.aikar.timings.TimingsManager;
+import co.technove.air.AIR;
+import co.technove.air.ValueType;
 import com.destroystokyo.paper.PaperConfig;
 import com.google.common.base.Throwables;
 import net.minecraft.locale.LocaleLanguage;
@@ -15,6 +17,8 @@ import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.event.inventory.InventoryType;
 
 import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -278,4 +282,28 @@ public class PurpurConfig {
     private static void tpsCatchup() {
         tpsCatchup = getBoolean("settings.tps-catchup", tpsCatchup);
     }
+
+    public static boolean multithreadedEntityTracker = false;
+    public static boolean entityTrackerAsyncPackets = false;
+    private static void entityTracker() {
+        if (version < 12) {
+            File airplaneConfigFile = new File("airplane.air");
+            if (airplaneConfigFile.exists()) {
+                try {
+                    AIR airplaneConfig;
+
+                    FileInputStream inputStream = new FileInputStream(airplaneConfigFile);
+                    airplaneConfig = new AIR(inputStream);
+
+                    multithreadedEntityTracker = airplaneConfig.getBoolean("tracker.multithreaded", multithreadedEntityTracker);
+                    entityTrackerAsyncPackets = airplaneConfig.getBoolean("tracker.unsafe-async-packets", entityTrackerAsyncPackets);
+
+                    // Currently not working
+                    airplaneConfig.setComment("tracker", "No longer an Airplane feature, migrated to purpur.yml", "DO NOT seek multithreaded tracker support in Airplane's Discord!");
+                } catch (IOException ignored) {}
+            }
+        }
+        multithreadedEntityTracker = getBoolean("settings.tracker.multithreaded", multithreadedEntityTracker);
+        entityTrackerAsyncPackets = getBoolean("settings.tracker.unsafe-async-packets", entityTrackerAsyncPackets);
+    }
 }
