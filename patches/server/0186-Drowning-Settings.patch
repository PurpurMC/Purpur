From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ben Kerllenevich <me@notom3ga.me>
Date: Sun, 21 Mar 2021 15:26:52 -0400
Subject: [PATCH] Drowning Settings


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 426bebc5cd67ffcc72ee56d437cc13f6846e109c..552b203ace7aa70adfdd2fa0401608b320ff85ef 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -2628,7 +2628,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
     public final int getMaxAirTicks() { return bH(); } // Paper - OBFHELPER
     public int bH() {
-        return 300;
+        return this.world.purpurConfig.drowningAirTicks; // Purpur
     }
 
     public int getAirTicks() {
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index c5762aebcdd383ab710d4891308a7b1e815c44fd..5010ae07f52b54ee833cafdd94baaae6f2904e9e 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -298,7 +298,7 @@ public abstract class EntityLiving extends Entity {
             if (this.a((Tag) TagsFluid.WATER) && !this.world.getType(new BlockPosition(this.locX(), this.getHeadY(), this.locZ())).a(Blocks.BUBBLE_COLUMN)) {
                 if (!this.canBreatheUnderwater() && !MobEffectUtil.c(this) && !flag1) {  // Paper - use OBFHELPER so it can be overridden
                     this.setAirTicks(this.l(this.getAirTicks()));
-                    if (this.getAirTicks() == -20) {
+                    if (this.getAirTicks() == -this.world.purpurConfig.drowningDamageInterval) { // Purpur
                         this.setAirTicks(0);
                         Vec3D vec3d = this.getMot();
 
@@ -310,7 +310,7 @@ public abstract class EntityLiving extends Entity {
                             this.world.addParticle(Particles.BUBBLE, this.locX() + d2, this.locY() + d3, this.locZ() + d4, vec3d.x, vec3d.y, vec3d.z);
                         }
 
-                        this.damageEntity(DamageSource.DROWN, 2.0F);
+                        this.damageEntity(DamageSource.DROWN, (float) this.world.purpurConfig.damageFromDrowning); // Purpur
                     }
                 }
 
diff --git a/src/main/java/net/pl3x/purpur/PurpurWorldConfig.java b/src/main/java/net/pl3x/purpur/PurpurWorldConfig.java
index 0f385273214c469e0f0d8a57b6c9bad9a79d221b..e31031f1f3c7f01925c2100ffcb892166c9e7f78 100644
--- a/src/main/java/net/pl3x/purpur/PurpurWorldConfig.java
+++ b/src/main/java/net/pl3x/purpur/PurpurWorldConfig.java
@@ -2004,4 +2004,13 @@ public class PurpurWorldConfig {
             baseCrystalExplosionEffect = Explosion.Effect.DESTROY;
         }
     }
+
+    public int drowningAirTicks = 300;
+    public int drowningDamageInterval = 20;
+    public double damageFromDrowning = 2.0F;
+    private void drowningSettings() {
+        drowningAirTicks = getInt("gameplay-mechanics.drowning.air-ticks", drowningAirTicks);
+        drowningDamageInterval = getInt("gameplay-mechanics.drowning.ticks-per-damage", drowningDamageInterval);
+        damageFromDrowning = getDouble("gameplay-mechanics.drowning.damage-from-drowning", damageFromDrowning);
+    }
 }
